/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal EOF;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal SEMICOLON;
terminal CLASS;
terminal NIL;
terminal ARRAY;
terminal WHILE;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal IF;
terminal LBRACE;
terminal RBRACE;
terminal LBRACK;
terminal RBRACK;
terminal COMMA;
terminal DOT;
terminal ELLIPSIS;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal COMMENT;
terminal error;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM program;
non terminal AST_DEC dec;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_DEC arrayDec;
non terminal AST_EXP exp;
non terminal AST_STMT stmt;
non terminal AST_NEW_EXP newExp;
non terminal AST_C_FIELD cField;
non terminal AST_STMT_LIST stmtList;
non terminal AST_ID_LIST idList;
non terminal AST_C_FIELD_LIST cFieldList;
non terminal AST_EXP_LIST expList;
non terminal AST_VAR_SIMPLE varSimple;
non terminal AST_VAR_FIELD varField;
non terminal AST_VAR_SUBSCRIPT varSubscript;
non terminal AST_STMT_VAR_DEC stmtVarDec;
non terminal AST_STMT_ASSIGN stmtAssign;
non terminal AST_STMT_ASSIGN_NEW stmtAssignNew;



/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program     ::=     dec:d  program:p        {: RESULT = new AST_PROGRAM(d,p);      :}
                  | dec:d                   {: RESULT = new AST_PROGRAM(d,null);      :}
                    ;

dec         ::=     varDec:v                {: RESULT = new AST_DEC_VAR(v); :}
                  | funcDec:f               {: RESULT = new AST_DEC_FUNC(f); :}
                  | classDec:c              {: RESULT = new AST_DEC_CLASS(c); :}
                  | arrayDec:a              {: RESULT = new AST_DEC_ARRAY(a); :}
                    ;

varDec      ::=     ID:id1 ID:id2 SEMICOLON                 {: RESULT = new AST_VAR_DEC_EXP(id1, id2, null); :}
                  | ID:id1 ID:id2 ASSIGN exp:e SEMICOLON    {: RESULT = new AST_VAR_DEC_EXP(id1, id2, e); :}
                  | ID:id1 ID:id2 ASSIGN newExp:e SEMICOLON {: RESULT = new AST_VAR_DEC_NEW_EXP(id1, id2, e); :}
                    ;

funcDec      ::=    ID:id1 ID:id2 LPAREN RPAREN LBRACE stmtList:stlist RBRACE                {: RESULT = new AST_FUNC_DEC(id1, id2, null,   stlist); :}
                  | ID:id1 ID:id2 LPAREN idList:idlist RPAREN LBRACE stmtList:stlist RBRACE  {: RESULT = new AST_FUNC_DEC(id1, id2, idlist, stlist); :}
                    ;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
				  | stmt:s				    {: RESULT = new AST_STMT_LIST(s,null); :}
					;

idList      ::= 	ID:id1 ID:id2 COMMA idList:idl		{: RESULT = new AST_ID_LIST(id1, id2, idl);    :}
                  | ID:id1 ID:id2				        {: RESULT = new AST_ID_LIST(id1, id2, null); :}
                	;

classDec    ::=     CLASS ID:id1 EXTENDS ID: id2 LBRACE cFieldList:cList RBRACE {: RESULT = new AST_CLASS_DEC(id1, id2, cList); :}
                  | CLASS ID:id1 LBRACE cFieldList:cList RBRACE                 {: RESULT = new AST_CLASS_DEC(id1, null, cList); :}
                    ;

cFieldList  ::=     cField:c cFieldList:cl  {: RESULT = new AST_C_FIELD_LIST(c, cl) ;:}
                  | cField:c                {: RESULT = new AST_C_FIELD_LIST(c, null) ;:}
                    ;

arrayDec    ::=     ARRAY ID:id1 EQ ID:id2 LBRACK RBRACK    {: RESULT = new AST_ARRAY_DEC(id1, id2) ; :}
                    ;

exp         ::=     var:v                                       {: RESULT = new AST_EXP_VAR(v); :}
                  | LPAREN exp:e RPAREN                         {: RESULT = new AST_EXP_WRAPPER(e); :}
                  | exp:e1 PLUS exp:e2                          {: RESULT = new AST_EXP_BINOP(e1, e2, 0); :}
                  | exp:e1 MINUS exp:e2                         {: RESULT = new AST_EXP_BINOP(e1, e2, 1); :}
                  | exp:e1 TIMES exp:e2                         {: RESULT = new AST_EXP_BINOP(e1, e2, 2); :}
                  | exp:e1 DIVIDE exp:e2                        {: RESULT = new AST_EXP_BINOP(e1, e2, 3); :}
                  | exp:e1 GT exp:e2                            {: RESULT = new AST_EXP_BINOP(e1, e2, 4); :}
                  | exp:e1 LT exp:e2                            {: RESULT = new AST_EXP_BINOP(e1, e2, 5); :}
                  | exp:e1 EQ exp:e2                            {: RESULT = new AST_EXP_BINOP(e1, e2, 6); :}
                  | ID:id1 LPAREN RPAREN                        {: RESULT = new AST_EXP_FUNC(null, id1, null); :}
                  | ID:id1 LPAREN expList:el RPAREN             {: RESULT = new AST_EXP_FUNC(null, id1, el); :}
                  | var:v DOT ID:id1 LPAREN RPAREN              {: RESULT = new AST_EXP_FUNC(v, id1, null); :}
                  | var:v DOT ID:id1 LPAREN expList:el RPAREN   {: RESULT = new AST_EXP_FUNC(v, id1, el); :}
                  | INT:i                                       {: RESULT = new AST_EXP_INT(i); :}
                  | MINUS INT:i                                 {: RESULT = new AST_EXP_INT(-i); :}
                  | NIL                                         {: RESULT = new AST_EXP_NIL(); :}
                  | STRING:st                                   {: RESULT = new AST_EXP_STRING(st); :}
                    ;

expList     ::=     exp:e expList:el    {: RESULT = new AST_EXP_LIST(e, el) ;:}
                  | exp:e               {: RESULT = new AST_EXP_LIST(e, null) ;:}
                    ;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
				  | var:v DOT ID:fieldName			    {: RESULT = new AST_VAR_FIELD(v,fieldName); :}
				  | var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt        ::=     varDec:vc                                               {: RESULT = new AST_STMT_VAR_DEC(vc); :}
                  | var:v ASSIGN exp:e SEMICOLON		                    {: RESULT = new AST_STMT_ASSIGN(v,e); :}
                  | var:v ASSIGN newExp:e SEMICOLON		                    {: RESULT = new AST_STMT_ASSIGN_NEW(v,e); :}
                  | RETURN SEMICOLON                                        {: RESULT = new AST_STMT_RETURN(null); :}
                  | RETURN exp:e SEMICOLON                                  {: RESULT = new AST_STMT_RETURN(e); :}
                  | IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
                  | WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_STMT_WHILE(cond,body); :}
                  | ID:id1 LPAREN RPAREN SEMICOLON                          {: RESULT = new AST_STMT_FUNC(null,id1,null); :}
                  | var:v1 DOT ID:id1 LPAREN RPAREN SEMICOLON               {: RESULT = new AST_STMT_FUNC(v1,id1,null); :}
                  | var:v1 DOT ID:id1 LPAREN expList:el RPAREN SEMICOLON    {: RESULT = new AST_STMT_FUNC(v1,id1,el); :}
                  | ID:id1 LPAREN expList:el RPAREN SEMICOLON               {: RESULT = new AST_STMT_FUNC(null,id1,el); :}
                    ;

newExp      ::=     NEW ID:id                       {: RESULT = new AST_NEW_EXP(id, null); :}
                  | NEW ID:id LBRACK exp:e RBRACK   {: RESULT = new AST_NEW_EXP(id, e); :}
                    ;

cField      ::=     varDec:v                {: RESULT = new AST_C_FIELD_VAR(v); :}
                  | funcDec:f               {: RESULT = new AST_C_FIELD_FUNC(f); :}
                    ;